# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _pyry3d_cpp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyry3d_cpp', [dirname(__file__)])
        except ImportError:
            import _pyry3d_cpp
            return _pyry3d_cpp
        if fp is not None:
            try:
                _mod = imp.load_module('_pyry3d_cpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyry3d_cpp = swig_import_helper()
    del swig_import_helper
else:
    import _pyry3d_cpp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyry3d_cpp.delete_SwigPyIterator
    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_pyry3d_cpp.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_pyry3d_cpp.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_pyry3d_cpp.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_pyry3d_cpp.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_pyry3d_cpp.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_pyry3d_cpp.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_pyry3d_cpp.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_pyry3d_cpp.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_pyry3d_cpp.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_pyry3d_cpp.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_pyry3d_cpp.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_pyry3d_cpp.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_pyry3d_cpp.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_pyry3d_cpp.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_pyry3d_cpp.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_pyry3d_cpp.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _pyry3d_cpp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

LT = _pyry3d_cpp.LT
LE = _pyry3d_cpp.LE
GE = _pyry3d_cpp.GE
GT = _pyry3d_cpp.GT
class Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyry3d_cpp.delete_Restraint
Restraint.score = new_instancemethod(_pyry3d_cpp.Restraint_score,None,Restraint)
Restraint.isSymmetry = new_instancemethod(_pyry3d_cpp.Restraint_isSymmetry,None,Restraint)
Restraint_swigregister = _pyry3d_cpp.Restraint_swigregister
Restraint_swigregister(Restraint)

class Logical(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _pyry3d_cpp.Logical_swiginit(self,_pyry3d_cpp.new_Logical(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_Logical
Logical.score = new_instancemethod(_pyry3d_cpp.Logical_score,None,Logical)
Logical_swigregister = _pyry3d_cpp.Logical_swigregister
Logical_swigregister(Logical)

class ResidueRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    chain_index = _swig_property(_pyry3d_cpp.ResidueRange_chain_index_get, _pyry3d_cpp.ResidueRange_chain_index_set)
    begin = _swig_property(_pyry3d_cpp.ResidueRange_begin_get, _pyry3d_cpp.ResidueRange_begin_set)
    end = _swig_property(_pyry3d_cpp.ResidueRange_end_get, _pyry3d_cpp.ResidueRange_end_set)
    atom_name = _swig_property(_pyry3d_cpp.ResidueRange_atom_name_get, _pyry3d_cpp.ResidueRange_atom_name_set)
    def __init__(self, *args): 
        _pyry3d_cpp.ResidueRange_swiginit(self,_pyry3d_cpp.new_ResidueRange(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_ResidueRange
ResidueRange_swigregister = _pyry3d_cpp.ResidueRange_swigregister
ResidueRange_swigregister(ResidueRange)

class RelationRestraint(Restraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyry3d_cpp.delete_RelationRestraint
RelationRestraint.update_min_diff = new_instancemethod(_pyry3d_cpp.RelationRestraint_update_min_diff,None,RelationRestraint)
RelationRestraint_swigregister = _pyry3d_cpp.RelationRestraint_swigregister
RelationRestraint_swigregister(RelationRestraint)

class PointDistance(RelationRestraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _pyry3d_cpp.PointDistance_swiginit(self,_pyry3d_cpp.new_PointDistance(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_PointDistance
PointDistance_swigregister = _pyry3d_cpp.PointDistance_swigregister
PointDistance_swigregister(PointDistance)

class ResidueDistance(RelationRestraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _pyry3d_cpp.ResidueDistance_swiginit(self,_pyry3d_cpp.new_ResidueDistance(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_ResidueDistance
ResidueDistance_swigregister = _pyry3d_cpp.ResidueDistance_swigregister
ResidueDistance_swigregister(ResidueDistance)

class RelationDistance(Restraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _pyry3d_cpp.RelationDistance_swiginit(self,_pyry3d_cpp.new_RelationDistance(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_RelationDistance
RelationDistance_swigregister = _pyry3d_cpp.RelationDistance_swigregister
RelationDistance_swigregister(RelationDistance)

class SurfaceAccess(RelationRestraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _pyry3d_cpp.SurfaceAccess_swiginit(self,_pyry3d_cpp.new_SurfaceAccess(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_SurfaceAccess
SurfaceAccess_swigregister = _pyry3d_cpp.SurfaceAccess_swigregister
SurfaceAccess_swigregister(SurfaceAccess)

class Distance(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _pyry3d_cpp.Distance_swiginit(self,_pyry3d_cpp.new_Distance(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_Distance
Distance.compute = new_instancemethod(_pyry3d_cpp.Distance_compute,None,Distance)
Distance_swigregister = _pyry3d_cpp.Distance_swigregister
Distance_swigregister(Distance)

class Symmetry(Restraint):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        _pyry3d_cpp.Symmetry_swiginit(self,_pyry3d_cpp.new_Symmetry(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_Symmetry
Symmetry_swigregister = _pyry3d_cpp.Symmetry_swigregister
Symmetry_swigregister(Symmetry)


def update_restraints_score(*args):
  return _pyry3d_cpp.update_restraints_score(*args)
update_restraints_score = _pyry3d_cpp.update_restraints_score

def calculate_restraints_score(*args):
  return _pyry3d_cpp.calculate_restraints_score(*args)
calculate_restraints_score = _pyry3d_cpp.calculate_restraints_score

def calculate_symmetry_score(*args):
  return _pyry3d_cpp.calculate_symmetry_score(*args)
calculate_symmetry_score = _pyry3d_cpp.calculate_symmetry_score

def new_FloatArr(*args):
  return _pyry3d_cpp.new_FloatArr(*args)
new_FloatArr = _pyry3d_cpp.new_FloatArr

def delete_FloatArr(*args):
  return _pyry3d_cpp.delete_FloatArr(*args)
delete_FloatArr = _pyry3d_cpp.delete_FloatArr

def FloatArr_getitem(*args):
  return _pyry3d_cpp.FloatArr_getitem(*args)
FloatArr_getitem = _pyry3d_cpp.FloatArr_getitem

def FloatArr_setitem(*args):
  return _pyry3d_cpp.FloatArr_setitem(*args)
FloatArr_setitem = _pyry3d_cpp.FloatArr_setitem
class StringFloatVectorMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.StringFloatVectorMap_swiginit(self,_pyry3d_cpp.new_StringFloatVectorMap(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_StringFloatVectorMap
StringFloatVectorMap.iterator = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_iterator,None,StringFloatVectorMap)
StringFloatVectorMap.__nonzero__ = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap___nonzero__,None,StringFloatVectorMap)
StringFloatVectorMap.__bool__ = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap___bool__,None,StringFloatVectorMap)
StringFloatVectorMap.__len__ = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap___len__,None,StringFloatVectorMap)
StringFloatVectorMap.__getitem__ = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap___getitem__,None,StringFloatVectorMap)
StringFloatVectorMap.__delitem__ = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap___delitem__,None,StringFloatVectorMap)
StringFloatVectorMap.has_key = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_has_key,None,StringFloatVectorMap)
StringFloatVectorMap.keys = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_keys,None,StringFloatVectorMap)
StringFloatVectorMap.values = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_values,None,StringFloatVectorMap)
StringFloatVectorMap.items = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_items,None,StringFloatVectorMap)
StringFloatVectorMap.__contains__ = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap___contains__,None,StringFloatVectorMap)
StringFloatVectorMap.key_iterator = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_key_iterator,None,StringFloatVectorMap)
StringFloatVectorMap.value_iterator = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_value_iterator,None,StringFloatVectorMap)
StringFloatVectorMap.__setitem__ = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap___setitem__,None,StringFloatVectorMap)
StringFloatVectorMap.asdict = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_asdict,None,StringFloatVectorMap)
StringFloatVectorMap.empty = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_empty,None,StringFloatVectorMap)
StringFloatVectorMap.size = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_size,None,StringFloatVectorMap)
StringFloatVectorMap.clear = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_clear,None,StringFloatVectorMap)
StringFloatVectorMap.swap = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_swap,None,StringFloatVectorMap)
StringFloatVectorMap.get_allocator = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_get_allocator,None,StringFloatVectorMap)
StringFloatVectorMap.begin = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_begin,None,StringFloatVectorMap)
StringFloatVectorMap.end = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_end,None,StringFloatVectorMap)
StringFloatVectorMap.rbegin = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_rbegin,None,StringFloatVectorMap)
StringFloatVectorMap.rend = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_rend,None,StringFloatVectorMap)
StringFloatVectorMap.count = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_count,None,StringFloatVectorMap)
StringFloatVectorMap.erase = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_erase,None,StringFloatVectorMap)
StringFloatVectorMap.find = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_find,None,StringFloatVectorMap)
StringFloatVectorMap.lower_bound = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_lower_bound,None,StringFloatVectorMap)
StringFloatVectorMap.upper_bound = new_instancemethod(_pyry3d_cpp.StringFloatVectorMap_upper_bound,None,StringFloatVectorMap)
StringFloatVectorMap_swigregister = _pyry3d_cpp.StringFloatVectorMap_swigregister
StringFloatVectorMap_swigregister(StringFloatVectorMap)

class FloatVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.FloatVector_swiginit(self,_pyry3d_cpp.new_FloatVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_FloatVector
FloatVector.iterator = new_instancemethod(_pyry3d_cpp.FloatVector_iterator,None,FloatVector)
FloatVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.FloatVector___nonzero__,None,FloatVector)
FloatVector.__bool__ = new_instancemethod(_pyry3d_cpp.FloatVector___bool__,None,FloatVector)
FloatVector.__len__ = new_instancemethod(_pyry3d_cpp.FloatVector___len__,None,FloatVector)
FloatVector.pop = new_instancemethod(_pyry3d_cpp.FloatVector_pop,None,FloatVector)
FloatVector.__getslice__ = new_instancemethod(_pyry3d_cpp.FloatVector___getslice__,None,FloatVector)
FloatVector.__setslice__ = new_instancemethod(_pyry3d_cpp.FloatVector___setslice__,None,FloatVector)
FloatVector.__delslice__ = new_instancemethod(_pyry3d_cpp.FloatVector___delslice__,None,FloatVector)
FloatVector.__delitem__ = new_instancemethod(_pyry3d_cpp.FloatVector___delitem__,None,FloatVector)
FloatVector.__getitem__ = new_instancemethod(_pyry3d_cpp.FloatVector___getitem__,None,FloatVector)
FloatVector.__setitem__ = new_instancemethod(_pyry3d_cpp.FloatVector___setitem__,None,FloatVector)
FloatVector.append = new_instancemethod(_pyry3d_cpp.FloatVector_append,None,FloatVector)
FloatVector.empty = new_instancemethod(_pyry3d_cpp.FloatVector_empty,None,FloatVector)
FloatVector.size = new_instancemethod(_pyry3d_cpp.FloatVector_size,None,FloatVector)
FloatVector.clear = new_instancemethod(_pyry3d_cpp.FloatVector_clear,None,FloatVector)
FloatVector.swap = new_instancemethod(_pyry3d_cpp.FloatVector_swap,None,FloatVector)
FloatVector.get_allocator = new_instancemethod(_pyry3d_cpp.FloatVector_get_allocator,None,FloatVector)
FloatVector.begin = new_instancemethod(_pyry3d_cpp.FloatVector_begin,None,FloatVector)
FloatVector.end = new_instancemethod(_pyry3d_cpp.FloatVector_end,None,FloatVector)
FloatVector.rbegin = new_instancemethod(_pyry3d_cpp.FloatVector_rbegin,None,FloatVector)
FloatVector.rend = new_instancemethod(_pyry3d_cpp.FloatVector_rend,None,FloatVector)
FloatVector.pop_back = new_instancemethod(_pyry3d_cpp.FloatVector_pop_back,None,FloatVector)
FloatVector.erase = new_instancemethod(_pyry3d_cpp.FloatVector_erase,None,FloatVector)
FloatVector.push_back = new_instancemethod(_pyry3d_cpp.FloatVector_push_back,None,FloatVector)
FloatVector.front = new_instancemethod(_pyry3d_cpp.FloatVector_front,None,FloatVector)
FloatVector.back = new_instancemethod(_pyry3d_cpp.FloatVector_back,None,FloatVector)
FloatVector.assign = new_instancemethod(_pyry3d_cpp.FloatVector_assign,None,FloatVector)
FloatVector.resize = new_instancemethod(_pyry3d_cpp.FloatVector_resize,None,FloatVector)
FloatVector.insert = new_instancemethod(_pyry3d_cpp.FloatVector_insert,None,FloatVector)
FloatVector.reserve = new_instancemethod(_pyry3d_cpp.FloatVector_reserve,None,FloatVector)
FloatVector.capacity = new_instancemethod(_pyry3d_cpp.FloatVector_capacity,None,FloatVector)
FloatVector_swigregister = _pyry3d_cpp.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class FloatVectorVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.FloatVectorVector_swiginit(self,_pyry3d_cpp.new_FloatVectorVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_FloatVectorVector
FloatVectorVector.iterator = new_instancemethod(_pyry3d_cpp.FloatVectorVector_iterator,None,FloatVectorVector)
FloatVectorVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___nonzero__,None,FloatVectorVector)
FloatVectorVector.__bool__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___bool__,None,FloatVectorVector)
FloatVectorVector.__len__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___len__,None,FloatVectorVector)
FloatVectorVector.pop = new_instancemethod(_pyry3d_cpp.FloatVectorVector_pop,None,FloatVectorVector)
FloatVectorVector.__getslice__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___getslice__,None,FloatVectorVector)
FloatVectorVector.__setslice__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___setslice__,None,FloatVectorVector)
FloatVectorVector.__delslice__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___delslice__,None,FloatVectorVector)
FloatVectorVector.__delitem__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___delitem__,None,FloatVectorVector)
FloatVectorVector.__getitem__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___getitem__,None,FloatVectorVector)
FloatVectorVector.__setitem__ = new_instancemethod(_pyry3d_cpp.FloatVectorVector___setitem__,None,FloatVectorVector)
FloatVectorVector.append = new_instancemethod(_pyry3d_cpp.FloatVectorVector_append,None,FloatVectorVector)
FloatVectorVector.empty = new_instancemethod(_pyry3d_cpp.FloatVectorVector_empty,None,FloatVectorVector)
FloatVectorVector.size = new_instancemethod(_pyry3d_cpp.FloatVectorVector_size,None,FloatVectorVector)
FloatVectorVector.clear = new_instancemethod(_pyry3d_cpp.FloatVectorVector_clear,None,FloatVectorVector)
FloatVectorVector.swap = new_instancemethod(_pyry3d_cpp.FloatVectorVector_swap,None,FloatVectorVector)
FloatVectorVector.get_allocator = new_instancemethod(_pyry3d_cpp.FloatVectorVector_get_allocator,None,FloatVectorVector)
FloatVectorVector.begin = new_instancemethod(_pyry3d_cpp.FloatVectorVector_begin,None,FloatVectorVector)
FloatVectorVector.end = new_instancemethod(_pyry3d_cpp.FloatVectorVector_end,None,FloatVectorVector)
FloatVectorVector.rbegin = new_instancemethod(_pyry3d_cpp.FloatVectorVector_rbegin,None,FloatVectorVector)
FloatVectorVector.rend = new_instancemethod(_pyry3d_cpp.FloatVectorVector_rend,None,FloatVectorVector)
FloatVectorVector.pop_back = new_instancemethod(_pyry3d_cpp.FloatVectorVector_pop_back,None,FloatVectorVector)
FloatVectorVector.erase = new_instancemethod(_pyry3d_cpp.FloatVectorVector_erase,None,FloatVectorVector)
FloatVectorVector.push_back = new_instancemethod(_pyry3d_cpp.FloatVectorVector_push_back,None,FloatVectorVector)
FloatVectorVector.front = new_instancemethod(_pyry3d_cpp.FloatVectorVector_front,None,FloatVectorVector)
FloatVectorVector.back = new_instancemethod(_pyry3d_cpp.FloatVectorVector_back,None,FloatVectorVector)
FloatVectorVector.assign = new_instancemethod(_pyry3d_cpp.FloatVectorVector_assign,None,FloatVectorVector)
FloatVectorVector.resize = new_instancemethod(_pyry3d_cpp.FloatVectorVector_resize,None,FloatVectorVector)
FloatVectorVector.insert = new_instancemethod(_pyry3d_cpp.FloatVectorVector_insert,None,FloatVectorVector)
FloatVectorVector.reserve = new_instancemethod(_pyry3d_cpp.FloatVectorVector_reserve,None,FloatVectorVector)
FloatVectorVector.capacity = new_instancemethod(_pyry3d_cpp.FloatVectorVector_capacity,None,FloatVectorVector)
FloatVectorVector_swigregister = _pyry3d_cpp.FloatVectorVector_swigregister
FloatVectorVector_swigregister(FloatVectorVector)

class IntVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.IntVector_swiginit(self,_pyry3d_cpp.new_IntVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_IntVector
IntVector.iterator = new_instancemethod(_pyry3d_cpp.IntVector_iterator,None,IntVector)
IntVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.IntVector___nonzero__,None,IntVector)
IntVector.__bool__ = new_instancemethod(_pyry3d_cpp.IntVector___bool__,None,IntVector)
IntVector.__len__ = new_instancemethod(_pyry3d_cpp.IntVector___len__,None,IntVector)
IntVector.pop = new_instancemethod(_pyry3d_cpp.IntVector_pop,None,IntVector)
IntVector.__getslice__ = new_instancemethod(_pyry3d_cpp.IntVector___getslice__,None,IntVector)
IntVector.__setslice__ = new_instancemethod(_pyry3d_cpp.IntVector___setslice__,None,IntVector)
IntVector.__delslice__ = new_instancemethod(_pyry3d_cpp.IntVector___delslice__,None,IntVector)
IntVector.__delitem__ = new_instancemethod(_pyry3d_cpp.IntVector___delitem__,None,IntVector)
IntVector.__getitem__ = new_instancemethod(_pyry3d_cpp.IntVector___getitem__,None,IntVector)
IntVector.__setitem__ = new_instancemethod(_pyry3d_cpp.IntVector___setitem__,None,IntVector)
IntVector.append = new_instancemethod(_pyry3d_cpp.IntVector_append,None,IntVector)
IntVector.empty = new_instancemethod(_pyry3d_cpp.IntVector_empty,None,IntVector)
IntVector.size = new_instancemethod(_pyry3d_cpp.IntVector_size,None,IntVector)
IntVector.clear = new_instancemethod(_pyry3d_cpp.IntVector_clear,None,IntVector)
IntVector.swap = new_instancemethod(_pyry3d_cpp.IntVector_swap,None,IntVector)
IntVector.get_allocator = new_instancemethod(_pyry3d_cpp.IntVector_get_allocator,None,IntVector)
IntVector.begin = new_instancemethod(_pyry3d_cpp.IntVector_begin,None,IntVector)
IntVector.end = new_instancemethod(_pyry3d_cpp.IntVector_end,None,IntVector)
IntVector.rbegin = new_instancemethod(_pyry3d_cpp.IntVector_rbegin,None,IntVector)
IntVector.rend = new_instancemethod(_pyry3d_cpp.IntVector_rend,None,IntVector)
IntVector.pop_back = new_instancemethod(_pyry3d_cpp.IntVector_pop_back,None,IntVector)
IntVector.erase = new_instancemethod(_pyry3d_cpp.IntVector_erase,None,IntVector)
IntVector.push_back = new_instancemethod(_pyry3d_cpp.IntVector_push_back,None,IntVector)
IntVector.front = new_instancemethod(_pyry3d_cpp.IntVector_front,None,IntVector)
IntVector.back = new_instancemethod(_pyry3d_cpp.IntVector_back,None,IntVector)
IntVector.assign = new_instancemethod(_pyry3d_cpp.IntVector_assign,None,IntVector)
IntVector.resize = new_instancemethod(_pyry3d_cpp.IntVector_resize,None,IntVector)
IntVector.insert = new_instancemethod(_pyry3d_cpp.IntVector_insert,None,IntVector)
IntVector.reserve = new_instancemethod(_pyry3d_cpp.IntVector_reserve,None,IntVector)
IntVector.capacity = new_instancemethod(_pyry3d_cpp.IntVector_capacity,None,IntVector)
IntVector_swigregister = _pyry3d_cpp.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.StringVector_swiginit(self,_pyry3d_cpp.new_StringVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_StringVector
StringVector.iterator = new_instancemethod(_pyry3d_cpp.StringVector_iterator,None,StringVector)
StringVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.StringVector___nonzero__,None,StringVector)
StringVector.__bool__ = new_instancemethod(_pyry3d_cpp.StringVector___bool__,None,StringVector)
StringVector.__len__ = new_instancemethod(_pyry3d_cpp.StringVector___len__,None,StringVector)
StringVector.pop = new_instancemethod(_pyry3d_cpp.StringVector_pop,None,StringVector)
StringVector.__getslice__ = new_instancemethod(_pyry3d_cpp.StringVector___getslice__,None,StringVector)
StringVector.__setslice__ = new_instancemethod(_pyry3d_cpp.StringVector___setslice__,None,StringVector)
StringVector.__delslice__ = new_instancemethod(_pyry3d_cpp.StringVector___delslice__,None,StringVector)
StringVector.__delitem__ = new_instancemethod(_pyry3d_cpp.StringVector___delitem__,None,StringVector)
StringVector.__getitem__ = new_instancemethod(_pyry3d_cpp.StringVector___getitem__,None,StringVector)
StringVector.__setitem__ = new_instancemethod(_pyry3d_cpp.StringVector___setitem__,None,StringVector)
StringVector.append = new_instancemethod(_pyry3d_cpp.StringVector_append,None,StringVector)
StringVector.empty = new_instancemethod(_pyry3d_cpp.StringVector_empty,None,StringVector)
StringVector.size = new_instancemethod(_pyry3d_cpp.StringVector_size,None,StringVector)
StringVector.clear = new_instancemethod(_pyry3d_cpp.StringVector_clear,None,StringVector)
StringVector.swap = new_instancemethod(_pyry3d_cpp.StringVector_swap,None,StringVector)
StringVector.get_allocator = new_instancemethod(_pyry3d_cpp.StringVector_get_allocator,None,StringVector)
StringVector.begin = new_instancemethod(_pyry3d_cpp.StringVector_begin,None,StringVector)
StringVector.end = new_instancemethod(_pyry3d_cpp.StringVector_end,None,StringVector)
StringVector.rbegin = new_instancemethod(_pyry3d_cpp.StringVector_rbegin,None,StringVector)
StringVector.rend = new_instancemethod(_pyry3d_cpp.StringVector_rend,None,StringVector)
StringVector.pop_back = new_instancemethod(_pyry3d_cpp.StringVector_pop_back,None,StringVector)
StringVector.erase = new_instancemethod(_pyry3d_cpp.StringVector_erase,None,StringVector)
StringVector.push_back = new_instancemethod(_pyry3d_cpp.StringVector_push_back,None,StringVector)
StringVector.front = new_instancemethod(_pyry3d_cpp.StringVector_front,None,StringVector)
StringVector.back = new_instancemethod(_pyry3d_cpp.StringVector_back,None,StringVector)
StringVector.assign = new_instancemethod(_pyry3d_cpp.StringVector_assign,None,StringVector)
StringVector.resize = new_instancemethod(_pyry3d_cpp.StringVector_resize,None,StringVector)
StringVector.insert = new_instancemethod(_pyry3d_cpp.StringVector_insert,None,StringVector)
StringVector.reserve = new_instancemethod(_pyry3d_cpp.StringVector_reserve,None,StringVector)
StringVector.capacity = new_instancemethod(_pyry3d_cpp.StringVector_capacity,None,StringVector)
StringVector_swigregister = _pyry3d_cpp.StringVector_swigregister
StringVector_swigregister(StringVector)

class ComplexVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.ComplexVector_swiginit(self,_pyry3d_cpp.new_ComplexVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_ComplexVector
ComplexVector.iterator = new_instancemethod(_pyry3d_cpp.ComplexVector_iterator,None,ComplexVector)
ComplexVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.ComplexVector___nonzero__,None,ComplexVector)
ComplexVector.__bool__ = new_instancemethod(_pyry3d_cpp.ComplexVector___bool__,None,ComplexVector)
ComplexVector.__len__ = new_instancemethod(_pyry3d_cpp.ComplexVector___len__,None,ComplexVector)
ComplexVector.pop = new_instancemethod(_pyry3d_cpp.ComplexVector_pop,None,ComplexVector)
ComplexVector.__getslice__ = new_instancemethod(_pyry3d_cpp.ComplexVector___getslice__,None,ComplexVector)
ComplexVector.__setslice__ = new_instancemethod(_pyry3d_cpp.ComplexVector___setslice__,None,ComplexVector)
ComplexVector.__delslice__ = new_instancemethod(_pyry3d_cpp.ComplexVector___delslice__,None,ComplexVector)
ComplexVector.__delitem__ = new_instancemethod(_pyry3d_cpp.ComplexVector___delitem__,None,ComplexVector)
ComplexVector.__getitem__ = new_instancemethod(_pyry3d_cpp.ComplexVector___getitem__,None,ComplexVector)
ComplexVector.__setitem__ = new_instancemethod(_pyry3d_cpp.ComplexVector___setitem__,None,ComplexVector)
ComplexVector.append = new_instancemethod(_pyry3d_cpp.ComplexVector_append,None,ComplexVector)
ComplexVector.empty = new_instancemethod(_pyry3d_cpp.ComplexVector_empty,None,ComplexVector)
ComplexVector.size = new_instancemethod(_pyry3d_cpp.ComplexVector_size,None,ComplexVector)
ComplexVector.clear = new_instancemethod(_pyry3d_cpp.ComplexVector_clear,None,ComplexVector)
ComplexVector.swap = new_instancemethod(_pyry3d_cpp.ComplexVector_swap,None,ComplexVector)
ComplexVector.get_allocator = new_instancemethod(_pyry3d_cpp.ComplexVector_get_allocator,None,ComplexVector)
ComplexVector.begin = new_instancemethod(_pyry3d_cpp.ComplexVector_begin,None,ComplexVector)
ComplexVector.end = new_instancemethod(_pyry3d_cpp.ComplexVector_end,None,ComplexVector)
ComplexVector.rbegin = new_instancemethod(_pyry3d_cpp.ComplexVector_rbegin,None,ComplexVector)
ComplexVector.rend = new_instancemethod(_pyry3d_cpp.ComplexVector_rend,None,ComplexVector)
ComplexVector.pop_back = new_instancemethod(_pyry3d_cpp.ComplexVector_pop_back,None,ComplexVector)
ComplexVector.erase = new_instancemethod(_pyry3d_cpp.ComplexVector_erase,None,ComplexVector)
ComplexVector.push_back = new_instancemethod(_pyry3d_cpp.ComplexVector_push_back,None,ComplexVector)
ComplexVector.front = new_instancemethod(_pyry3d_cpp.ComplexVector_front,None,ComplexVector)
ComplexVector.back = new_instancemethod(_pyry3d_cpp.ComplexVector_back,None,ComplexVector)
ComplexVector.assign = new_instancemethod(_pyry3d_cpp.ComplexVector_assign,None,ComplexVector)
ComplexVector.resize = new_instancemethod(_pyry3d_cpp.ComplexVector_resize,None,ComplexVector)
ComplexVector.insert = new_instancemethod(_pyry3d_cpp.ComplexVector_insert,None,ComplexVector)
ComplexVector.reserve = new_instancemethod(_pyry3d_cpp.ComplexVector_reserve,None,ComplexVector)
ComplexVector.capacity = new_instancemethod(_pyry3d_cpp.ComplexVector_capacity,None,ComplexVector)
ComplexVector_swigregister = _pyry3d_cpp.ComplexVector_swigregister
ComplexVector_swigregister(ComplexVector)

class BoolVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.BoolVector_swiginit(self,_pyry3d_cpp.new_BoolVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_BoolVector
BoolVector.iterator = new_instancemethod(_pyry3d_cpp.BoolVector_iterator,None,BoolVector)
BoolVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.BoolVector___nonzero__,None,BoolVector)
BoolVector.__bool__ = new_instancemethod(_pyry3d_cpp.BoolVector___bool__,None,BoolVector)
BoolVector.__len__ = new_instancemethod(_pyry3d_cpp.BoolVector___len__,None,BoolVector)
BoolVector.pop = new_instancemethod(_pyry3d_cpp.BoolVector_pop,None,BoolVector)
BoolVector.__getslice__ = new_instancemethod(_pyry3d_cpp.BoolVector___getslice__,None,BoolVector)
BoolVector.__setslice__ = new_instancemethod(_pyry3d_cpp.BoolVector___setslice__,None,BoolVector)
BoolVector.__delslice__ = new_instancemethod(_pyry3d_cpp.BoolVector___delslice__,None,BoolVector)
BoolVector.__delitem__ = new_instancemethod(_pyry3d_cpp.BoolVector___delitem__,None,BoolVector)
BoolVector.__getitem__ = new_instancemethod(_pyry3d_cpp.BoolVector___getitem__,None,BoolVector)
BoolVector.__setitem__ = new_instancemethod(_pyry3d_cpp.BoolVector___setitem__,None,BoolVector)
BoolVector.append = new_instancemethod(_pyry3d_cpp.BoolVector_append,None,BoolVector)
BoolVector.empty = new_instancemethod(_pyry3d_cpp.BoolVector_empty,None,BoolVector)
BoolVector.size = new_instancemethod(_pyry3d_cpp.BoolVector_size,None,BoolVector)
BoolVector.clear = new_instancemethod(_pyry3d_cpp.BoolVector_clear,None,BoolVector)
BoolVector.swap = new_instancemethod(_pyry3d_cpp.BoolVector_swap,None,BoolVector)
BoolVector.get_allocator = new_instancemethod(_pyry3d_cpp.BoolVector_get_allocator,None,BoolVector)
BoolVector.begin = new_instancemethod(_pyry3d_cpp.BoolVector_begin,None,BoolVector)
BoolVector.end = new_instancemethod(_pyry3d_cpp.BoolVector_end,None,BoolVector)
BoolVector.rbegin = new_instancemethod(_pyry3d_cpp.BoolVector_rbegin,None,BoolVector)
BoolVector.rend = new_instancemethod(_pyry3d_cpp.BoolVector_rend,None,BoolVector)
BoolVector.pop_back = new_instancemethod(_pyry3d_cpp.BoolVector_pop_back,None,BoolVector)
BoolVector.erase = new_instancemethod(_pyry3d_cpp.BoolVector_erase,None,BoolVector)
BoolVector.push_back = new_instancemethod(_pyry3d_cpp.BoolVector_push_back,None,BoolVector)
BoolVector.front = new_instancemethod(_pyry3d_cpp.BoolVector_front,None,BoolVector)
BoolVector.back = new_instancemethod(_pyry3d_cpp.BoolVector_back,None,BoolVector)
BoolVector.assign = new_instancemethod(_pyry3d_cpp.BoolVector_assign,None,BoolVector)
BoolVector.resize = new_instancemethod(_pyry3d_cpp.BoolVector_resize,None,BoolVector)
BoolVector.insert = new_instancemethod(_pyry3d_cpp.BoolVector_insert,None,BoolVector)
BoolVector.reserve = new_instancemethod(_pyry3d_cpp.BoolVector_reserve,None,BoolVector)
BoolVector.capacity = new_instancemethod(_pyry3d_cpp.BoolVector_capacity,None,BoolVector)
BoolVector_swigregister = _pyry3d_cpp.BoolVector_swigregister
BoolVector_swigregister(BoolVector)

class StringFloatMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.StringFloatMap_swiginit(self,_pyry3d_cpp.new_StringFloatMap(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_StringFloatMap
StringFloatMap.iterator = new_instancemethod(_pyry3d_cpp.StringFloatMap_iterator,None,StringFloatMap)
StringFloatMap.__nonzero__ = new_instancemethod(_pyry3d_cpp.StringFloatMap___nonzero__,None,StringFloatMap)
StringFloatMap.__bool__ = new_instancemethod(_pyry3d_cpp.StringFloatMap___bool__,None,StringFloatMap)
StringFloatMap.__len__ = new_instancemethod(_pyry3d_cpp.StringFloatMap___len__,None,StringFloatMap)
StringFloatMap.__getitem__ = new_instancemethod(_pyry3d_cpp.StringFloatMap___getitem__,None,StringFloatMap)
StringFloatMap.__delitem__ = new_instancemethod(_pyry3d_cpp.StringFloatMap___delitem__,None,StringFloatMap)
StringFloatMap.has_key = new_instancemethod(_pyry3d_cpp.StringFloatMap_has_key,None,StringFloatMap)
StringFloatMap.keys = new_instancemethod(_pyry3d_cpp.StringFloatMap_keys,None,StringFloatMap)
StringFloatMap.values = new_instancemethod(_pyry3d_cpp.StringFloatMap_values,None,StringFloatMap)
StringFloatMap.items = new_instancemethod(_pyry3d_cpp.StringFloatMap_items,None,StringFloatMap)
StringFloatMap.__contains__ = new_instancemethod(_pyry3d_cpp.StringFloatMap___contains__,None,StringFloatMap)
StringFloatMap.key_iterator = new_instancemethod(_pyry3d_cpp.StringFloatMap_key_iterator,None,StringFloatMap)
StringFloatMap.value_iterator = new_instancemethod(_pyry3d_cpp.StringFloatMap_value_iterator,None,StringFloatMap)
StringFloatMap.__setitem__ = new_instancemethod(_pyry3d_cpp.StringFloatMap___setitem__,None,StringFloatMap)
StringFloatMap.asdict = new_instancemethod(_pyry3d_cpp.StringFloatMap_asdict,None,StringFloatMap)
StringFloatMap.empty = new_instancemethod(_pyry3d_cpp.StringFloatMap_empty,None,StringFloatMap)
StringFloatMap.size = new_instancemethod(_pyry3d_cpp.StringFloatMap_size,None,StringFloatMap)
StringFloatMap.clear = new_instancemethod(_pyry3d_cpp.StringFloatMap_clear,None,StringFloatMap)
StringFloatMap.swap = new_instancemethod(_pyry3d_cpp.StringFloatMap_swap,None,StringFloatMap)
StringFloatMap.get_allocator = new_instancemethod(_pyry3d_cpp.StringFloatMap_get_allocator,None,StringFloatMap)
StringFloatMap.begin = new_instancemethod(_pyry3d_cpp.StringFloatMap_begin,None,StringFloatMap)
StringFloatMap.end = new_instancemethod(_pyry3d_cpp.StringFloatMap_end,None,StringFloatMap)
StringFloatMap.rbegin = new_instancemethod(_pyry3d_cpp.StringFloatMap_rbegin,None,StringFloatMap)
StringFloatMap.rend = new_instancemethod(_pyry3d_cpp.StringFloatMap_rend,None,StringFloatMap)
StringFloatMap.count = new_instancemethod(_pyry3d_cpp.StringFloatMap_count,None,StringFloatMap)
StringFloatMap.erase = new_instancemethod(_pyry3d_cpp.StringFloatMap_erase,None,StringFloatMap)
StringFloatMap.find = new_instancemethod(_pyry3d_cpp.StringFloatMap_find,None,StringFloatMap)
StringFloatMap.lower_bound = new_instancemethod(_pyry3d_cpp.StringFloatMap_lower_bound,None,StringFloatMap)
StringFloatMap.upper_bound = new_instancemethod(_pyry3d_cpp.StringFloatMap_upper_bound,None,StringFloatMap)
StringFloatMap_swigregister = _pyry3d_cpp.StringFloatMap_swigregister
StringFloatMap_swigregister(StringFloatMap)

class IntVectorVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.IntVectorVector_swiginit(self,_pyry3d_cpp.new_IntVectorVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_IntVectorVector
IntVectorVector.iterator = new_instancemethod(_pyry3d_cpp.IntVectorVector_iterator,None,IntVectorVector)
IntVectorVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___nonzero__,None,IntVectorVector)
IntVectorVector.__bool__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___bool__,None,IntVectorVector)
IntVectorVector.__len__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___len__,None,IntVectorVector)
IntVectorVector.pop = new_instancemethod(_pyry3d_cpp.IntVectorVector_pop,None,IntVectorVector)
IntVectorVector.__getslice__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___getslice__,None,IntVectorVector)
IntVectorVector.__setslice__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___setslice__,None,IntVectorVector)
IntVectorVector.__delslice__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___delslice__,None,IntVectorVector)
IntVectorVector.__delitem__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___delitem__,None,IntVectorVector)
IntVectorVector.__getitem__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___getitem__,None,IntVectorVector)
IntVectorVector.__setitem__ = new_instancemethod(_pyry3d_cpp.IntVectorVector___setitem__,None,IntVectorVector)
IntVectorVector.append = new_instancemethod(_pyry3d_cpp.IntVectorVector_append,None,IntVectorVector)
IntVectorVector.empty = new_instancemethod(_pyry3d_cpp.IntVectorVector_empty,None,IntVectorVector)
IntVectorVector.size = new_instancemethod(_pyry3d_cpp.IntVectorVector_size,None,IntVectorVector)
IntVectorVector.clear = new_instancemethod(_pyry3d_cpp.IntVectorVector_clear,None,IntVectorVector)
IntVectorVector.swap = new_instancemethod(_pyry3d_cpp.IntVectorVector_swap,None,IntVectorVector)
IntVectorVector.get_allocator = new_instancemethod(_pyry3d_cpp.IntVectorVector_get_allocator,None,IntVectorVector)
IntVectorVector.begin = new_instancemethod(_pyry3d_cpp.IntVectorVector_begin,None,IntVectorVector)
IntVectorVector.end = new_instancemethod(_pyry3d_cpp.IntVectorVector_end,None,IntVectorVector)
IntVectorVector.rbegin = new_instancemethod(_pyry3d_cpp.IntVectorVector_rbegin,None,IntVectorVector)
IntVectorVector.rend = new_instancemethod(_pyry3d_cpp.IntVectorVector_rend,None,IntVectorVector)
IntVectorVector.pop_back = new_instancemethod(_pyry3d_cpp.IntVectorVector_pop_back,None,IntVectorVector)
IntVectorVector.erase = new_instancemethod(_pyry3d_cpp.IntVectorVector_erase,None,IntVectorVector)
IntVectorVector.push_back = new_instancemethod(_pyry3d_cpp.IntVectorVector_push_back,None,IntVectorVector)
IntVectorVector.front = new_instancemethod(_pyry3d_cpp.IntVectorVector_front,None,IntVectorVector)
IntVectorVector.back = new_instancemethod(_pyry3d_cpp.IntVectorVector_back,None,IntVectorVector)
IntVectorVector.assign = new_instancemethod(_pyry3d_cpp.IntVectorVector_assign,None,IntVectorVector)
IntVectorVector.resize = new_instancemethod(_pyry3d_cpp.IntVectorVector_resize,None,IntVectorVector)
IntVectorVector.insert = new_instancemethod(_pyry3d_cpp.IntVectorVector_insert,None,IntVectorVector)
IntVectorVector.reserve = new_instancemethod(_pyry3d_cpp.IntVectorVector_reserve,None,IntVectorVector)
IntVectorVector.capacity = new_instancemethod(_pyry3d_cpp.IntVectorVector_capacity,None,IntVectorVector)
IntVectorVector_swigregister = _pyry3d_cpp.IntVectorVector_swigregister
IntVectorVector_swigregister(IntVectorVector)

class DistanceVector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __iter__(self): return self.iterator()
    def __init__(self, *args): 
        _pyry3d_cpp.DistanceVector_swiginit(self,_pyry3d_cpp.new_DistanceVector(*args))
    __swig_destroy__ = _pyry3d_cpp.delete_DistanceVector
DistanceVector.iterator = new_instancemethod(_pyry3d_cpp.DistanceVector_iterator,None,DistanceVector)
DistanceVector.__nonzero__ = new_instancemethod(_pyry3d_cpp.DistanceVector___nonzero__,None,DistanceVector)
DistanceVector.__bool__ = new_instancemethod(_pyry3d_cpp.DistanceVector___bool__,None,DistanceVector)
DistanceVector.__len__ = new_instancemethod(_pyry3d_cpp.DistanceVector___len__,None,DistanceVector)
DistanceVector.pop = new_instancemethod(_pyry3d_cpp.DistanceVector_pop,None,DistanceVector)
DistanceVector.__getslice__ = new_instancemethod(_pyry3d_cpp.DistanceVector___getslice__,None,DistanceVector)
DistanceVector.__setslice__ = new_instancemethod(_pyry3d_cpp.DistanceVector___setslice__,None,DistanceVector)
DistanceVector.__delslice__ = new_instancemethod(_pyry3d_cpp.DistanceVector___delslice__,None,DistanceVector)
DistanceVector.__delitem__ = new_instancemethod(_pyry3d_cpp.DistanceVector___delitem__,None,DistanceVector)
DistanceVector.__getitem__ = new_instancemethod(_pyry3d_cpp.DistanceVector___getitem__,None,DistanceVector)
DistanceVector.__setitem__ = new_instancemethod(_pyry3d_cpp.DistanceVector___setitem__,None,DistanceVector)
DistanceVector.append = new_instancemethod(_pyry3d_cpp.DistanceVector_append,None,DistanceVector)
DistanceVector.empty = new_instancemethod(_pyry3d_cpp.DistanceVector_empty,None,DistanceVector)
DistanceVector.size = new_instancemethod(_pyry3d_cpp.DistanceVector_size,None,DistanceVector)
DistanceVector.clear = new_instancemethod(_pyry3d_cpp.DistanceVector_clear,None,DistanceVector)
DistanceVector.swap = new_instancemethod(_pyry3d_cpp.DistanceVector_swap,None,DistanceVector)
DistanceVector.get_allocator = new_instancemethod(_pyry3d_cpp.DistanceVector_get_allocator,None,DistanceVector)
DistanceVector.begin = new_instancemethod(_pyry3d_cpp.DistanceVector_begin,None,DistanceVector)
DistanceVector.end = new_instancemethod(_pyry3d_cpp.DistanceVector_end,None,DistanceVector)
DistanceVector.rbegin = new_instancemethod(_pyry3d_cpp.DistanceVector_rbegin,None,DistanceVector)
DistanceVector.rend = new_instancemethod(_pyry3d_cpp.DistanceVector_rend,None,DistanceVector)
DistanceVector.pop_back = new_instancemethod(_pyry3d_cpp.DistanceVector_pop_back,None,DistanceVector)
DistanceVector.erase = new_instancemethod(_pyry3d_cpp.DistanceVector_erase,None,DistanceVector)
DistanceVector.push_back = new_instancemethod(_pyry3d_cpp.DistanceVector_push_back,None,DistanceVector)
DistanceVector.front = new_instancemethod(_pyry3d_cpp.DistanceVector_front,None,DistanceVector)
DistanceVector.back = new_instancemethod(_pyry3d_cpp.DistanceVector_back,None,DistanceVector)
DistanceVector.assign = new_instancemethod(_pyry3d_cpp.DistanceVector_assign,None,DistanceVector)
DistanceVector.insert = new_instancemethod(_pyry3d_cpp.DistanceVector_insert,None,DistanceVector)
DistanceVector.reserve = new_instancemethod(_pyry3d_cpp.DistanceVector_reserve,None,DistanceVector)
DistanceVector.capacity = new_instancemethod(_pyry3d_cpp.DistanceVector_capacity,None,DistanceVector)
DistanceVector_swigregister = _pyry3d_cpp.DistanceVector_swigregister
DistanceVector_swigregister(DistanceVector)


def add_covalent_bond(*args):
  return _pyry3d_cpp.add_covalent_bond(*args)
add_covalent_bond = _pyry3d_cpp.add_covalent_bond

def add_disorder(*args):
  return _pyry3d_cpp.add_disorder(*args)
add_disorder = _pyry3d_cpp.add_disorder

def add_logical(*args):
  return _pyry3d_cpp.add_logical(*args)
add_logical = _pyry3d_cpp.add_logical

def add_point_distance(*args):
  return _pyry3d_cpp.add_point_distance(*args)
add_point_distance = _pyry3d_cpp.add_point_distance

def add_relation_interaction(*args):
  return _pyry3d_cpp.add_relation_interaction(*args)
add_relation_interaction = _pyry3d_cpp.add_relation_interaction

def add_residue_distance(*args):
  return _pyry3d_cpp.add_residue_distance(*args)
add_residue_distance = _pyry3d_cpp.add_residue_distance

def add_surface_access(*args):
  return _pyry3d_cpp.add_surface_access(*args)
add_surface_access = _pyry3d_cpp.add_surface_access

def add_symmetry(*args):
  return _pyry3d_cpp.add_symmetry(*args)
add_symmetry = _pyry3d_cpp.add_symmetry

def add_to_save(*args):
  return _pyry3d_cpp.add_to_save(*args)
add_to_save = _pyry3d_cpp.add_to_save

def append_score(*args):
  return _pyry3d_cpp.append_score(*args)
append_score = _pyry3d_cpp.append_score

def assign_new_taken_indexes(*args):
  return _pyry3d_cpp.assign_new_taken_indexes(*args)
assign_new_taken_indexes = _pyry3d_cpp.assign_new_taken_indexes

def calculate_mass_of_complex_and_componets(*args):
  return _pyry3d_cpp.calculate_mass_of_complex_and_componets(*args)
calculate_mass_of_complex_and_componets = _pyry3d_cpp.calculate_mass_of_complex_and_componets

def create_component(*args):
  return _pyry3d_cpp.create_component(*args)
create_component = _pyry3d_cpp.create_component

def calculate_outbox_mapfill(*args):
  return _pyry3d_cpp.calculate_outbox_mapfill(*args)
calculate_outbox_mapfill = _pyry3d_cpp.calculate_outbox_mapfill

def calculate_simulation_score_for_complex(*args):
  return _pyry3d_cpp.calculate_simulation_score_for_complex(*args)
calculate_simulation_score_for_complex = _pyry3d_cpp.calculate_simulation_score_for_complex

def calculate_score_for_one_component_complex(*args):
  return _pyry3d_cpp.calculate_score_for_one_component_complex(*args)
calculate_score_for_one_component_complex = _pyry3d_cpp.calculate_score_for_one_component_complex

def deepcopy_complex(*args):
  return _pyry3d_cpp.deepcopy_complex(*args)
deepcopy_complex = _pyry3d_cpp.deepcopy_complex

def deepcopy_complex_to_best_score_complex(*args):
  return _pyry3d_cpp.deepcopy_complex_to_best_score_complex(*args)
deepcopy_complex_to_best_score_complex = _pyry3d_cpp.deepcopy_complex_to_best_score_complex

def deepcopy_complex_to_best_score_niter_complex(*args):
  return _pyry3d_cpp.deepcopy_complex_to_best_score_niter_complex(*args)
deepcopy_complex_to_best_score_niter_complex = _pyry3d_cpp.deepcopy_complex_to_best_score_niter_complex

def exchange(*args):
  return _pyry3d_cpp.exchange(*args)
exchange = _pyry3d_cpp.exchange

def fill_can_be_exchanged():
  return _pyry3d_cpp.fill_can_be_exchanged()
fill_can_be_exchanged = _pyry3d_cpp.fill_can_be_exchanged

def free_cpp():
  return _pyry3d_cpp.free_cpp()
free_cpp = _pyry3d_cpp.free_cpp

def get_atoms_number():
  return _pyry3d_cpp.get_atoms_number()
get_atoms_number = _pyry3d_cpp.get_atoms_number

def get_best_complex_score():
  return _pyry3d_cpp.get_best_complex_score()
get_best_complex_score = _pyry3d_cpp.get_best_complex_score

def get_complexes():
  return _pyry3d_cpp.get_complexes()
get_complexes = _pyry3d_cpp.get_complexes

def get_coords(*args):
  return _pyry3d_cpp.get_coords(*args)
get_coords = _pyry3d_cpp.get_coords

def get_niter_score():
  return _pyry3d_cpp.get_niter_score()
get_niter_score = _pyry3d_cpp.get_niter_score

def get_reptemp(*args):
  return _pyry3d_cpp.get_reptemp(*args)
get_reptemp = _pyry3d_cpp.get_reptemp

def get_restraints_size():
  return _pyry3d_cpp.get_restraints_size()
get_restraints_size = _pyry3d_cpp.get_restraints_size

def get_simul_params(*args):
  return _pyry3d_cpp.get_simul_params(*args)
get_simul_params = _pyry3d_cpp.get_simul_params

def get_simulation_clashes(*args):
  return _pyry3d_cpp.get_simulation_clashes(*args)
get_simulation_clashes = _pyry3d_cpp.get_simulation_clashes

def get_simulation_density(*args):
  return _pyry3d_cpp.get_simulation_density(*args)
get_simulation_density = _pyry3d_cpp.get_simulation_density

def get_simulation_freespace(*args):
  return _pyry3d_cpp.get_simulation_freespace(*args)
get_simulation_freespace = _pyry3d_cpp.get_simulation_freespace

def get_simulation_outbox(*args):
  return _pyry3d_cpp.get_simulation_outbox(*args)
get_simulation_outbox = _pyry3d_cpp.get_simulation_outbox

def get_simulation_restraints(*args):
  return _pyry3d_cpp.get_simulation_restraints(*args)
get_simulation_restraints = _pyry3d_cpp.get_simulation_restraints

def get_simulation_score(*args):
  return _pyry3d_cpp.get_simulation_score(*args)
get_simulation_score = _pyry3d_cpp.get_simulation_score

def get_step():
  return _pyry3d_cpp.get_step()
get_step = _pyry3d_cpp.get_step

def get_temp(*args):
  return _pyry3d_cpp.get_temp(*args)
get_temp = _pyry3d_cpp.get_temp

def get_transformation_frequencies(*args):
  return _pyry3d_cpp.get_transformation_frequencies(*args)
get_transformation_frequencies = _pyry3d_cpp.get_transformation_frequencies

def inc_step():
  return _pyry3d_cpp.inc_step()
inc_step = _pyry3d_cpp.inc_step

def init_cpp(*args):
  return _pyry3d_cpp.init_cpp(*args)
init_cpp = _pyry3d_cpp.init_cpp

def is_in_scores(*args):
  return _pyry3d_cpp.is_in_scores(*args)
is_in_scores = _pyry3d_cpp.is_in_scores

def number_of_components():
  return _pyry3d_cpp.number_of_components()
number_of_components = _pyry3d_cpp.number_of_components

def number_of_to_save():
  return _pyry3d_cpp.number_of_to_save()
number_of_to_save = _pyry3d_cpp.number_of_to_save

def parse_pdb(*args):
  return _pyry3d_cpp.parse_pdb(*args)
parse_pdb = _pyry3d_cpp.parse_pdb

def pool_size():
  return _pyry3d_cpp.pool_size()
pool_size = _pyry3d_cpp.pool_size

def pop():
  return _pyry3d_cpp.pop()
pop = _pyry3d_cpp.pop

def set_false_is_complex_outbox(*args):
  return _pyry3d_cpp.set_false_is_complex_outbox(*args)
set_false_is_complex_outbox = _pyry3d_cpp.set_false_is_complex_outbox

def set_false_is_complex_outmap(*args):
  return _pyry3d_cpp.set_false_is_complex_outmap(*args)
set_false_is_complex_outmap = _pyry3d_cpp.set_false_is_complex_outmap

def set_pool_size(*args):
  return _pyry3d_cpp.set_pool_size(*args)
set_pool_size = _pyry3d_cpp.set_pool_size

def populate_pool(*args):
  return _pyry3d_cpp.populate_pool(*args)
populate_pool = _pyry3d_cpp.populate_pool

def roulette(*args):
  return _pyry3d_cpp.roulette(*args)
roulette = _pyry3d_cpp.roulette

def save_complexes_to_save(*args):
  return _pyry3d_cpp.save_complexes_to_save(*args)
save_complexes_to_save = _pyry3d_cpp.save_complexes_to_save

def save_best_niter(*args):
  return _pyry3d_cpp.save_best_niter(*args)
save_best_niter = _pyry3d_cpp.save_best_niter

def send_arrays(*args):
  return _pyry3d_cpp.send_arrays(*args)
send_arrays = _pyry3d_cpp.send_arrays

def send_atom_radii(*args):
  return _pyry3d_cpp.send_atom_radii(*args)
send_atom_radii = _pyry3d_cpp.send_atom_radii

def send_grid(*args):
  return _pyry3d_cpp.send_grid(*args)
send_grid = _pyry3d_cpp.send_grid

def set_changed_component(*args):
  return _pyry3d_cpp.set_changed_component(*args)
set_changed_component = _pyry3d_cpp.set_changed_component

def set_clashes_nr(*args):
  return _pyry3d_cpp.set_clashes_nr(*args)
set_clashes_nr = _pyry3d_cpp.set_clashes_nr

def set_complex_data(*args):
  return _pyry3d_cpp.set_complex_data(*args)
set_complex_data = _pyry3d_cpp.set_complex_data

def set_components_data(*args):
  return _pyry3d_cpp.set_components_data(*args)
set_components_data = _pyry3d_cpp.set_components_data

def set_reptemp(*args):
  return _pyry3d_cpp.set_reptemp(*args)
set_reptemp = _pyry3d_cpp.set_reptemp

def set_temp(*args):
  return _pyry3d_cpp.set_temp(*args)
set_temp = _pyry3d_cpp.set_temp

def simul_size():
  return _pyry3d_cpp.simul_size()
simul_size = _pyry3d_cpp.simul_size

def sort_by_simulation_score():
  return _pyry3d_cpp.sort_by_simulation_score()
sort_by_simulation_score = _pyry3d_cpp.sort_by_simulation_score

def tournament(*args):
  return _pyry3d_cpp.tournament(*args)
tournament = _pyry3d_cpp.tournament

def try_to_push_in_to_save(*args):
  return _pyry3d_cpp.try_to_push_in_to_save(*args)
try_to_push_in_to_save = _pyry3d_cpp.try_to_push_in_to_save

def write_to_file(*args):
  return _pyry3d_cpp.write_to_file(*args)
write_to_file = _pyry3d_cpp.write_to_file


def perform_mutation(*args):
  return _pyry3d_cpp.perform_mutation(*args)
perform_mutation = _pyry3d_cpp.perform_mutation

